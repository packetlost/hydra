# This file is included in reference.conf at the path com.addthis.job.spawn.Spawn (or similar). This gives all
# of these settings the effective path of com.addthis.job.spawn.Spawn.dataDir and so on. Accordingly, they may
# be overridden via system properties; eg. `-Dcom.addthis.job.spawn.Spawn.queryPort=123`. (this functionality
# is provided by typesafe-config; see their docs for more details).

# A common idiom here (and elsewhere) is to support optional overrides from legacy system properties. This looks
# like `webPort = ${?spawn.http.port}`. They have no effect if the legacy system property is not set at runtime.

# If neither the fully qualified class path, nor the legacy alias (if any) is set, then the default will be used.
# These are the settings that look like `queueType = rabbit`. One of the three values will then be available at
# runtime via eg. `ConfigFactory.load().atPath("com.addthis.job.spawn.Spawn.queryPort");` The value is always
# available from the fully qualified class path. If a legacy alias or default is used, it is just copied to that
# location.

# Configurations on that path are queried by codec when constructing Spawn objects (and from corresponding fully
# qualified paths for objects of other types). Codec considers these the "global defaults" for those fields, and
# in Spawn's case, we generally just call `Configs.newDefault(Spawn.class)`, which attempts to use only "global
# defaults". This is a common idiom for singleton classes without any sub-classes.

debug = ${?spawn.debug} # legacy system property

dataDir = etc
_stateFilePath = spawn.state
_stateFilePath = ${?spawn.state.file} # legacy system property
stateFile = ${com.addthis.hydra.job.spawn.Spawn.dataDir}/${com.addthis.hydra.job.spawn.Spawn._stateFilePath}
jobStore = ${com.addthis.hydra.job.spawn.Spawn.dataDir}/jobstore

queueType = rabbit

taskQueueDrainInterval = 500 ms
hostStatusRequestInterval =  5 seconds
queueKickInterval = 500 ms
jobTaskUpdateHeartbeatInterval = 30 seconds

taskQueueDrainInterval = ${?task.queue.drain.interval} # legacy system property
hostStatusRequestInterval = ${?spawn.status.interval} # legacy system property
queueKickInterval = ${?spawn.queue.kick.interval} # legacy system property
jobTaskUpdateHeartbeatInterval = ${?spawn.jobtask.update.interval} # legacy system property

# thread pool for expanding jobs and sending kick messages (outside of the main application threads)
# - thread pool size of 10 chosen somewhat arbitrarily, most job expansions should be nearly instantaneous
# - max queue size of 5000 was chosen as a generous upper bound for how many tasks may be
#   queued at once (since the number of scheduled kicks is limited by queue size)
expandKickExecutor {
  thread-factory {nameFormat = "jobExpander-%d", daemon = true}
  core-threads = 10, max-threads = 10, keep-alive = 0, queue-size = 5000
  queue-gauge-class = com.addthis.hydra.job.spawn.Spawn, queue-gauge-name = expandKickExecutorQueue
}
scheduledExecutor {
  thread-factory {nameFormat = "spawnScheduledTask-%d", daemon = true}
  core-threads = 10
}
permissionsManager {
  authentication { type = allowall }
  authorization { type = basic }
}

jobDefaults {
  ownerWritable = true
  groupWritable = true
  worldWritable = true
  ownerExecutable = true
  groupExecutable = true
  worldExecutable = true
  hourlyBackups = 0
  dailyBackups = 4
  weeklyBackups = 1
  monthlyBackups = 0
  replicas = 1
  replicas = ${?spawn.defaultReplicaCount}
  autoRetry = true
}

datastoreCacheSize = "2 GiB"

# structuredLogDir = "./log/spawn-stats"
structuredLogDir = ${?spawn.logger.bundle.dir}

queryHttpHost = localhost
queryHttpHost = ${?spawn.queryhost} # legacy system property
queryPort = 2222
queryPort = ${?com.addthis.hydra.query.web.QueryServer.webPort}
httpHost = localhost
httpHost = ${?spawn.localhost} # legacy system property

# overide this with some groups
groupManager = {
  groups = []
}
